{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#importing libraries\n",
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "MMTHPKZpF8gi"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset=pd.read_csv('/content/twitter.csv')"
      ],
      "metadata": {
        "id": "nHH8Zs2dC7X5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "RNuq6VCcDBQu",
        "outputId": "8d3a5e5c-6035-44b6-f0cd-b675a94f416d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Unnamed: 0  count  hate_speech  offensive_language  neither  class  \\\n",
              "0               0      3            0                   0        3      2   \n",
              "1               1      3            0                   3        0      1   \n",
              "2               2      3            0                   3        0      1   \n",
              "3               3      3            0                   2        1      1   \n",
              "4               4      6            0                   6        0      1   \n",
              "...           ...    ...          ...                 ...      ...    ...   \n",
              "24778       25291      3            0                   2        1      1   \n",
              "24779       25292      3            0                   1        2      2   \n",
              "24780       25294      3            0                   3        0      1   \n",
              "24781       25295      6            0                   6        0      1   \n",
              "24782       25296      3            0                   0        3      2   \n",
              "\n",
              "                                                   tweet  \n",
              "0      !!! RT @mayasolovely: As a woman you shouldn't...  \n",
              "1      !!!!! RT @mleew17: boy dats cold...tyga dwn ba...  \n",
              "2      !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...  \n",
              "3      !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...  \n",
              "4      !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...  \n",
              "...                                                  ...  \n",
              "24778  you's a muthaf***in lie &#8220;@LifeAsKing: @2...  \n",
              "24779  you've gone and broke the wrong heart baby, an...  \n",
              "24780  young buck wanna eat!!.. dat nigguh like I ain...  \n",
              "24781              youu got wild bitches tellin you lies  \n",
              "24782  ~~Ruffled | Ntac Eileen Dahlia - Beautiful col...  \n",
              "\n",
              "[24783 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6d2270c0-3a5e-4d93-89aa-666787f052e1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>count</th>\n",
              "      <th>hate_speech</th>\n",
              "      <th>offensive_language</th>\n",
              "      <th>neither</th>\n",
              "      <th>class</th>\n",
              "      <th>tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24778</th>\n",
              "      <td>25291</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>you's a muthaf***in lie &amp;#8220;@LifeAsKing: @2...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24779</th>\n",
              "      <td>25292</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>you've gone and broke the wrong heart baby, an...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24780</th>\n",
              "      <td>25294</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>young buck wanna eat!!.. dat nigguh like I ain...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24781</th>\n",
              "      <td>25295</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>youu got wild bitches tellin you lies</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24782</th>\n",
              "      <td>25296</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>~~Ruffled | Ntac Eileen Dahlia - Beautiful col...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24783 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d2270c0-3a5e-4d93-89aa-666787f052e1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6d2270c0-3a5e-4d93-89aa-666787f052e1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6d2270c0-3a5e-4d93-89aa-666787f052e1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6cb9afca-8469-41da-93ae-f58387bfc8b4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6cb9afca-8469-41da-93ae-f58387bfc8b4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6cb9afca-8469-41da-93ae-f58387bfc8b4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d2fe0474-ddc5-4cab-8021-b1b77d4f2920\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dataset')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d2fe0474-ddc5-4cab-8021-b1b77d4f2920 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dataset');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 24783,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7299,\n        \"min\": 0,\n        \"max\": 25296,\n        \"num_unique_values\": 24783,\n        \"samples\": [\n          2326,\n          16283,\n          19362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6,\n          7,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hate_speech\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"offensive_language\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          8,\n          3,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neither\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          8,\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tweet\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 24783,\n        \"samples\": [\n          \"934 8616\\r\\ni got a missed call from yo bitch\",\n          \"RT @KINGTUNCHI_: Fucking with a bad bitch you gone need some money lil homie!\",\n          \"RT @eanahS__: @1inkkofrosess lol my credit ain't no where near good , but I know the right man for the job .. that ho nice though!\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "BWC-6IIfDHpa",
        "outputId": "0bd87f40-d32e-40f3-b764-94e1d453c3a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Unnamed: 0  count  hate_speech  offensive_language  neither  class  \\\n",
              "0           False  False        False               False    False  False   \n",
              "1           False  False        False               False    False  False   \n",
              "2           False  False        False               False    False  False   \n",
              "3           False  False        False               False    False  False   \n",
              "4           False  False        False               False    False  False   \n",
              "...           ...    ...          ...                 ...      ...    ...   \n",
              "24778       False  False        False               False    False  False   \n",
              "24779       False  False        False               False    False  False   \n",
              "24780       False  False        False               False    False  False   \n",
              "24781       False  False        False               False    False  False   \n",
              "24782       False  False        False               False    False  False   \n",
              "\n",
              "       tweet  \n",
              "0      False  \n",
              "1      False  \n",
              "2      False  \n",
              "3      False  \n",
              "4      False  \n",
              "...      ...  \n",
              "24778  False  \n",
              "24779  False  \n",
              "24780  False  \n",
              "24781  False  \n",
              "24782  False  \n",
              "\n",
              "[24783 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d883bf3e-5465-4bd2-ad9c-4cbc34f46f5b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>count</th>\n",
              "      <th>hate_speech</th>\n",
              "      <th>offensive_language</th>\n",
              "      <th>neither</th>\n",
              "      <th>class</th>\n",
              "      <th>tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24778</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24779</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24780</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24781</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24782</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24783 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d883bf3e-5465-4bd2-ad9c-4cbc34f46f5b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d883bf3e-5465-4bd2-ad9c-4cbc34f46f5b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d883bf3e-5465-4bd2-ad9c-4cbc34f46f5b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-36166d49-1eee-4f16-937a-da260322cced\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36166d49-1eee-4f16-937a-da260322cced')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-36166d49-1eee-4f16-937a-da260322cced button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 24783,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hate_speech\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"offensive_language\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neither\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tweet\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "nxglPpx8DJw5",
        "outputId": "03d7e2d8-2bb3-4501-9228-dc5171db4560"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0            0\n",
              "count                 0\n",
              "hate_speech           0\n",
              "offensive_language    0\n",
              "neither               0\n",
              "class                 0\n",
              "tweet                 0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hate_speech</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>offensive_language</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>neither</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>class</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tweet</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x1Uc-U6rDOkS",
        "outputId": "39ebcb1d-4953-43e4-b1aa-06184ad01882"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 24783 entries, 0 to 24782\n",
            "Data columns (total 7 columns):\n",
            " #   Column              Non-Null Count  Dtype \n",
            "---  ------              --------------  ----- \n",
            " 0   Unnamed: 0          24783 non-null  int64 \n",
            " 1   count               24783 non-null  int64 \n",
            " 2   hate_speech         24783 non-null  int64 \n",
            " 3   offensive_language  24783 non-null  int64 \n",
            " 4   neither             24783 non-null  int64 \n",
            " 5   class               24783 non-null  int64 \n",
            " 6   tweet               24783 non-null  object\n",
            "dtypes: int64(6), object(1)\n",
            "memory usage: 1.3+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "sf-GrOJjDSa2",
        "outputId": "49330878-9ff9-459d-ba48-1b8835bb4510"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Unnamed: 0         count   hate_speech  offensive_language  \\\n",
              "count  24783.000000  24783.000000  24783.000000        24783.000000   \n",
              "mean   12681.192027      3.243473      0.280515            2.413711   \n",
              "std     7299.553863      0.883060      0.631851            1.399459   \n",
              "min        0.000000      3.000000      0.000000            0.000000   \n",
              "25%     6372.500000      3.000000      0.000000            2.000000   \n",
              "50%    12703.000000      3.000000      0.000000            3.000000   \n",
              "75%    18995.500000      3.000000      0.000000            3.000000   \n",
              "max    25296.000000      9.000000      7.000000            9.000000   \n",
              "\n",
              "            neither         class  \n",
              "count  24783.000000  24783.000000  \n",
              "mean       0.549247      1.110277  \n",
              "std        1.113299      0.462089  \n",
              "min        0.000000      0.000000  \n",
              "25%        0.000000      1.000000  \n",
              "50%        0.000000      1.000000  \n",
              "75%        0.000000      1.000000  \n",
              "max        9.000000      2.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8841729-e9e0-4aba-865f-7cc50d1787f8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>count</th>\n",
              "      <th>hate_speech</th>\n",
              "      <th>offensive_language</th>\n",
              "      <th>neither</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>24783.000000</td>\n",
              "      <td>24783.000000</td>\n",
              "      <td>24783.000000</td>\n",
              "      <td>24783.000000</td>\n",
              "      <td>24783.000000</td>\n",
              "      <td>24783.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12681.192027</td>\n",
              "      <td>3.243473</td>\n",
              "      <td>0.280515</td>\n",
              "      <td>2.413711</td>\n",
              "      <td>0.549247</td>\n",
              "      <td>1.110277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7299.553863</td>\n",
              "      <td>0.883060</td>\n",
              "      <td>0.631851</td>\n",
              "      <td>1.399459</td>\n",
              "      <td>1.113299</td>\n",
              "      <td>0.462089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6372.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>12703.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>18995.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>25296.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8841729-e9e0-4aba-865f-7cc50d1787f8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c8841729-e9e0-4aba-865f-7cc50d1787f8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c8841729-e9e0-4aba-865f-7cc50d1787f8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-570a0b49-02ed-4498-b70a-977422ec820a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-570a0b49-02ed-4498-b70a-977422ec820a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-570a0b49-02ed-4498-b70a-977422ec820a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9019.443540678878,\n        \"min\": 0.0,\n        \"max\": 25296.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12681.19202679256,\n          12703.0,\n          24783.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8760.844908191184,\n        \"min\": 0.8830600691420467,\n        \"max\": 24783.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.2434733486664244,\n          9.0,\n          0.8830600691420467\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hate_speech\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8761.714374693966,\n        \"min\": 0.0,\n        \"max\": 24783.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.28051486906347095,\n          7.0,\n          0.6318510592278131\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"offensive_language\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8761.062853899848,\n        \"min\": 0.0,\n        \"max\": 24783.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          24783.0,\n          2.413711011580519,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neither\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8761.575679681884,\n        \"min\": 0.0,\n        \"max\": 24783.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5492474680224347,\n          9.0,\n          1.1132985222301646\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8761.781742989286,\n        \"min\": 0.0,\n        \"max\": 24783.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          24783.0,\n          1.1102772061493766,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset[\"labels\"]=dataset[\"class\"].map({0:\"Hate Speech\",\n",
        "                                      1:\"Offensive Language\",\n",
        "                                      2:\"No hate or offensive Language\"}\n",
        "                                     )"
      ],
      "metadata": {
        "id": "bj6fMJ3GDVRg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data=dataset[[\"tweet\",\"labels\"]]"
      ],
      "metadata": {
        "id": "jcBU1PACDYqr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "5PfNILzZDc86",
        "outputId": "ccdc2b4c-71ad-4dd4-eec9-ff9839ed1f2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                   tweet  \\\n",
              "0      !!! RT @mayasolovely: As a woman you shouldn't...   \n",
              "1      !!!!! RT @mleew17: boy dats cold...tyga dwn ba...   \n",
              "2      !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...   \n",
              "3      !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...   \n",
              "4      !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...   \n",
              "...                                                  ...   \n",
              "24778  you's a muthaf***in lie &#8220;@LifeAsKing: @2...   \n",
              "24779  you've gone and broke the wrong heart baby, an...   \n",
              "24780  young buck wanna eat!!.. dat nigguh like I ain...   \n",
              "24781              youu got wild bitches tellin you lies   \n",
              "24782  ~~Ruffled | Ntac Eileen Dahlia - Beautiful col...   \n",
              "\n",
              "                              labels  \n",
              "0      No hate or offensive Language  \n",
              "1                 Offensive Language  \n",
              "2                 Offensive Language  \n",
              "3                 Offensive Language  \n",
              "4                 Offensive Language  \n",
              "...                              ...  \n",
              "24778             Offensive Language  \n",
              "24779  No hate or offensive Language  \n",
              "24780             Offensive Language  \n",
              "24781             Offensive Language  \n",
              "24782  No hate or offensive Language  \n",
              "\n",
              "[24783 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e7e0eda-db3b-45cd-9e7e-399cf33416cf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet</th>\n",
              "      <th>labels</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n",
              "      <td>No hate or offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24778</th>\n",
              "      <td>you's a muthaf***in lie &amp;#8220;@LifeAsKing: @2...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24779</th>\n",
              "      <td>you've gone and broke the wrong heart baby, an...</td>\n",
              "      <td>No hate or offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24780</th>\n",
              "      <td>young buck wanna eat!!.. dat nigguh like I ain...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24781</th>\n",
              "      <td>youu got wild bitches tellin you lies</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24782</th>\n",
              "      <td>~~Ruffled | Ntac Eileen Dahlia - Beautiful col...</td>\n",
              "      <td>No hate or offensive Language</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24783 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e7e0eda-db3b-45cd-9e7e-399cf33416cf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e7e0eda-db3b-45cd-9e7e-399cf33416cf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e7e0eda-db3b-45cd-9e7e-399cf33416cf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1cb7d76f-1798-41e0-a016-f7491827e05d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1cb7d76f-1798-41e0-a016-f7491827e05d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1cb7d76f-1798-41e0-a016-f7491827e05d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_96e06833-c00f-4016-a289-5c8c1925f37b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_96e06833-c00f-4016-a289-5c8c1925f37b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 24783,\n  \"fields\": [\n    {\n      \"column\": \"tweet\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 24783,\n        \"samples\": [\n          \"934 8616\\r\\ni got a missed call from yo bitch\",\n          \"RT @KINGTUNCHI_: Fucking with a bad bitch you gone need some money lil homie!\",\n          \"RT @eanahS__: @1inkkofrosess lol my credit ain't no where near good , but I know the right man for the job .. that ho nice though!\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"No hate or offensive Language\",\n          \"Offensive Language\",\n          \"Hate Speech\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import nltk\n",
        "nltk.download(\"stopwords\")\n",
        "import string"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hkKk39tJDeo9",
        "outputId": "051a65e6-1b2b-459e-fa4a-fdc52315cf4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# removal of stop words and stemming the words\n",
        "from nltk.corpus import stopwords\n",
        "stopwords=set(stopwords.words(\"english\"))"
      ],
      "metadata": {
        "id": "selJkbiiDjNK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#import stemming\n",
        "stemmer= nltk.SnowballStemmer(\"english\")"
      ],
      "metadata": {
        "id": "AvHssWh6Dm93"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#data cleaning\n",
        "def clean_data(text):\n",
        "    text = str(text).lower()\n",
        "    text = re.sub('https?://\\S+|www.S+','',text)\n",
        "    text = re.sub('\\[.*?\\]', '',text)\n",
        "    text = re.sub('<.*?>+', '',text)\n",
        "    text = re.sub('[%s]' %re.escape(string.punctuation), '',text)\n",
        "    text = re.sub('\\n', '',text)\n",
        "    text = re.sub('\\w*\\d\\w*', '',text)\n",
        "    #stop words removal\n",
        "    text = [word for word in text.split(' ') if word not in stopwords]\n",
        "    text= \" \".join(text)\n",
        "    # Stemming the text\n",
        "    text = [stemmer.stem(word) for word in text.split(\" \")]\n",
        "    text= \" \".join(text)\n",
        "    return text"
      ],
      "metadata": {
        "id": "Y4G5RFfqDqQl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"tweet\"]=data[\"tweet\"].apply(clean_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iOPel8dBDwH9",
        "outputId": "6693eaa6-89b1-43d7-f591-f32e443e57b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-7cdb172179f8>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data[\"tweet\"]=data[\"tweet\"].apply(clean_data)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Ato24MIJDyKy",
        "outputId": "c9febb34-7493-414f-97d7-a51e06a163e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                   tweet  \\\n",
              "0       rt mayasolov woman shouldnt complain clean ho...   \n",
              "1       rt  boy dat coldtyga dwn bad cuffin dat hoe  ...   \n",
              "2       rt urkindofbrand dawg rt  ever fuck bitch sta...   \n",
              "3                 rt cganderson vivabas look like tranni   \n",
              "4       rt shenikarobert shit hear might true might f...   \n",
              "...                                                  ...   \n",
              "24778  yous muthafin lie   coreyemanuel right tl tras...   \n",
              "24779  youv gone broke wrong heart babi drove redneck...   \n",
              "24780  young buck wanna eat dat nigguh like aint fuck...   \n",
              "24781                     youu got wild bitch tellin lie   \n",
              "24782  ruffl  ntac eileen dahlia  beauti color combin...   \n",
              "\n",
              "                              labels  \n",
              "0      No hate or offensive Language  \n",
              "1                 Offensive Language  \n",
              "2                 Offensive Language  \n",
              "3                 Offensive Language  \n",
              "4                 Offensive Language  \n",
              "...                              ...  \n",
              "24778             Offensive Language  \n",
              "24779  No hate or offensive Language  \n",
              "24780             Offensive Language  \n",
              "24781             Offensive Language  \n",
              "24782  No hate or offensive Language  \n",
              "\n",
              "[24783 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-966e2442-da90-4bb4-86fc-ed7d49efbe50\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweet</th>\n",
              "      <th>labels</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>rt mayasolov woman shouldnt complain clean ho...</td>\n",
              "      <td>No hate or offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>rt  boy dat coldtyga dwn bad cuffin dat hoe  ...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>rt urkindofbrand dawg rt  ever fuck bitch sta...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>rt cganderson vivabas look like tranni</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>rt shenikarobert shit hear might true might f...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24778</th>\n",
              "      <td>yous muthafin lie   coreyemanuel right tl tras...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24779</th>\n",
              "      <td>youv gone broke wrong heart babi drove redneck...</td>\n",
              "      <td>No hate or offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24780</th>\n",
              "      <td>young buck wanna eat dat nigguh like aint fuck...</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24781</th>\n",
              "      <td>youu got wild bitch tellin lie</td>\n",
              "      <td>Offensive Language</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24782</th>\n",
              "      <td>ruffl  ntac eileen dahlia  beauti color combin...</td>\n",
              "      <td>No hate or offensive Language</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24783 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-966e2442-da90-4bb4-86fc-ed7d49efbe50')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-966e2442-da90-4bb4-86fc-ed7d49efbe50 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-966e2442-da90-4bb4-86fc-ed7d49efbe50');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1bdd3e15-e680-4f22-a6c4-381a9d163ce4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bdd3e15-e680-4f22-a6c4-381a9d163ce4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1bdd3e15-e680-4f22-a6c4-381a9d163ce4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e1537ca1-cab0-4ad8-ada3-bd738e866927\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e1537ca1-cab0-4ad8-ada3-bd738e866927 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 24783,\n  \"fields\": [\n    {\n      \"column\": \"tweet\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 24588,\n        \"samples\": [\n          \" import thing temporari bullshit lie fa bird kill \",\n          \" got new fish albino name shaquita  bahaha\",\n          \"ever sport seem script  end yanke game prove\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"No hate or offensive Language\",\n          \"Offensive Language\",\n          \"Hate Speech\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = np.array(data[\"tweet\"])\n",
        "Y = np.array(data[\"labels\"])\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lNpKttdkD1N3",
        "outputId": "af8e86de-9d51-4e81-84b6-03332e8d10f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([' rt mayasolov woman shouldnt complain clean hous amp man alway take trash',\n",
              "       ' rt  boy dat coldtyga dwn bad cuffin dat hoe  place',\n",
              "       ' rt urkindofbrand dawg rt  ever fuck bitch start cri confus shit',\n",
              "       ..., 'young buck wanna eat dat nigguh like aint fuckin dis',\n",
              "       'youu got wild bitch tellin lie',\n",
              "       'ruffl  ntac eileen dahlia  beauti color combin pink orang yellow amp white coll '],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "Lk4YtcwjD6DQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cv=CountVectorizer()\n",
        "X=cv.fit_transform(X)"
      ],
      "metadata": {
        "id": "w9YiIuSDD84d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "USIj-IizD_Qa",
        "outputId": "d34baf02-922e-42b8-ea11-4abe21c9550d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<24783x25540 sparse matrix of type '<class 'numpy.int64'>'\n",
              "\twith 198647 stored elements in Compressed Sparse Row format>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)"
      ],
      "metadata": {
        "id": "X9AkI51SD_fs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DXnkL_h8D_ve",
        "outputId": "150e7d45-5549-4649-abe6-3f99c3f9646a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<16604x25540 sparse matrix of type '<class 'numpy.int64'>'\n",
              "\twith 133087 stored elements in Compressed Sparse Row format>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# building out ml model\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ],
      "metadata": {
        "id": "0Y7hpsxsEIMF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dt=DecisionTreeClassifier()\n",
        "dt.fit(X_train,Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "Zb_v_VUFEIXd",
        "outputId": "9c16aff0-e1d7-4f7f-e3c4-5e30a1d1b2c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"â–¸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"â–¾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred= dt.predict(X_test)"
      ],
      "metadata": {
        "id": "BSETCZ3dEIjX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix and accuracy\n",
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(Y_test,Y_pred)\n",
        "cm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U_6jj810EIup",
        "outputId": "672642e1-33e5-49f4-9201-1480143fc6de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 157,   36,  272],\n",
              "       [  90, 1104,  185],\n",
              "       [ 267,  224, 5844]])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as ply\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "MhOBILo4EXWs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(cm,annot=True,fmt=\".1f\",cmap=\"YlGnBu\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "0M-bOZ90EXgO",
        "outputId": "123cd6b9-317d-48e2-facb-b6801715a0c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(Y_test,Y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "doma54NhEXsl",
        "outputId": "ebde7c59-2fd3-40d2-b1b9-aa3ee112270a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8686881036801565"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample=\"@UrKindOfBrand Dawg!!!! RT @80sbaby4life: You ever fuck a bitch and she start to cry? You be confused as shit\"\n",
        "sample=clean_data(sample)"
      ],
      "metadata": {
        "id": "Ve_hIpqHEhZy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sample"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "FqMua4-pEhjf",
        "outputId": "4e3511ea-2584-4aab-957d-b64e3857a9a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'urkindofbrand dawg rt  ever fuck bitch start cri confus shit'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data1 = cv.transform([sample]).toarray()\n",
        "data1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oB5iswhIEhsE",
        "outputId": "f7156613-7a98-4f20-9190-b05365533838"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 0, 0, ..., 0, 0, 0]])"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt.predict(data1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I24MBtbJErVm",
        "outputId": "bd3910de-b595-4918-89c6-7bee69e06150"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Offensive Language'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
